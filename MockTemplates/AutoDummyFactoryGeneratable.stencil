import Foundation

#if os(iOS) || os(tvOS) || os(watchOS)
import UIKit
#elseif os(OSX)
import AppKit
#endif
@testable import CleanArch
import CoreLocation
import AVFoundation

{# I think there might be better way to get enum cases. #}
{% macro enumDefaultValue variable %}{% for type in types.enums %}{% if type.name == variable.typeName.name %}{{ variable.typeName.name }}.{{ type.cases.first.name }}{% endif %}{% endfor %}{% endmacro %}
{# This macro defines default value for each types. #}
{% macro defaultValue variable %}{% if variable.isOptional %}nil{% elif variable.typeName.name == "Bool" %}false{% elif variable.typeName.name == "String" %}""{% elif variable.typeName.name == "Int" or variable.typeName.name == "Double" or variable.typeName.name == "Float" %}0{% elif variable.isArray %}[]{% elif variable.isDictionary %}[:]{% elif variable.type.kind == "enum" %}{% call enumDefaultValue variable %}{% else %}{{ variable.typeName.name }}.dummy(){% endif %}{% endmacro %}
{% for type in types.structs where type.based.AutoDummyFactoryGeneratable %}
{% if type.name != "AutoDummyFactoryGeneratable" %}
extension {{ type.name }} {
    static func dummy({% for variable in type.storedVariables %}{% if variable.defaultValue == null %}{{ variable.name }}: {{ variable.typeName }} = {% call defaultValue variable %}{% if variable.name != type.storedVariables.last.name %}, {% endif %}{% endif %}{% endfor %}) -> {{ type.name }} {
        return self.init({% for variable in type.storedVariables %}{% if variable.defaultValue == null %}{{ variable.name }}: {{ variable.name }}{% if variable.name != type.storedVariables.last.name %}, {% endif %}{% endif %}{% endfor %})
    }
}
{% endif %}
{% endfor %}
